ENABLE_DOCKER_TAG_DEPLOYMENT_PREFIX ?= false

# define phony targets
.PHONY: submodule-update \
	environment install build \
	test-start-docker test-stop-docker \
	test coverage \
	run run-worker \
	prod-run prod-run-worker \
	package publish \
	package-base publish-base \
	package-docker publish-docker \
	test-integration docker-login

############################## Makefile Repo Variables ##############################
ENV_FILE := "./environment.yaml"

GIT_BRANCH := $(shell git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')

CDIR := ${CURDIR}
SHELL := $(shell which bash)
PIP_EXTRA_INDEX_URL := $(shell echo $$PIP_EXTRA_INDEX_URL)
LATEST_GIT_COMMIT ?= $(shell git log -1 --format=%h)

CONDA_BIN := $(shell which conda || true)

ifeq ($(CONDA_BIN),)
CONDA_ROOT :=
APP_CONDA_ENV_PREFIX :=
CONDA_ACTIVATE :=
ENV_BIN_DIR :=
ENV_LIB_DIR :=
ENV_PYTHON :=
ENV_PIP :=
else
CONDA_ROOT := $(shell $(CONDA_BIN) info --base)
APP_CONDA_ENV_PREFIX := $(shell conda env list | grep $(APP_CONDA_ENV_NAME) | sort | awk '{$$1=""; print $$0}' | tr -d '*\| ')
CONDA_ACTIVATE := source $(CONDA_ROOT)/etc/profile.d/conda.sh ; conda activate $(APP_CONDA_ENV_NAME) && PATH=$(APP_CONDA_ENV_PREFIX)/bin:${PATH};
ENV_BIN_DIR := $(APP_CONDA_ENV_PREFIX)/bin
ENV_LIB_DIR := $(APP_CONDA_ENV_PREFIX)/lib
ENV_PYTHON := $(ENV_BIN_DIR)/python
ENV_PIP := $(ENV_BIN_DIR)/pip
endif

APP_BUILD_ENV ?= dev

RUN_OS := LINUX
ifeq ($(OS),Windows_NT)
	RUN_OS = WIN32
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S),Linux)
		RUN_OS = LINUX
	endif
	ifeq ($(UNAME_S),Darwin)
		RUN_OS = OSX
	endif
endif

DOCKER_REPO_PATH := $(shell echo "$$DOCKER_REPO/")
DOCKER_USERNAME_PATH := $(shell echo "$$DOCKER_USERNAME/$(DOCKER_PROJECT_PATH)")

DOCKER_LOGIN_REPO := $(shell echo $$DOCKER_REPO)
DOCKER_LOGIN_USERNAME := $(shell echo $$DOCKER_USERNAME)
DOCKER_LOGIN_PASSWORD := $(shell echo $$DOCKER_PASSWORD)

################## ADDED NEW VARIABLES/PARAMETERS ###########
AICR_DOCKER_NAMESPACE_PATH := $(shell echo "$$AICR_DOCKER_NAMESPACE_PREFIX/$(AICR_DOCKER_NAMESPACE)")
AICR_DOCKER_REPO_PATH := $(shell echo "$$AICR_DOCKER_REPO/")
AICR_DOCKER_LOGIN_REPO := $(shell echo $$AICR_DOCKER_REPO)
AICR_DOCKER_LOGIN_USERNAME := $(shell echo $$AICR_DOCKER_USERNAME)
AICR_DOCKER_LOGIN_PASSWORD := $(shell echo $$AICR_DOCKER_PASSWORD)
########################## END ###############################

DOCKER_ENV_PREFIX :=
ifeq ($(ENABLE_DOCKER_TAG_DEPLOYMENT_PREFIX), true)
	DOCKER_ENV_PREFIX := $(APP_BUILD_ENV)-
endif

DOCKER_IMAGE_TAG = $(DOCKER_ENV_PREFIX)$(shell cat VERSION | head -1 | awk '{$$1=$$1};1')
DOCKER_IMAGE_TAG_LATEST = $(DOCKER_ENV_PREFIX)latest

############################## Execution Environment ##############################

############################## Execution Environment Check ##############################
print-%: ; @echo $(CDIR) $* is $($*)

check-env: print-APP_CONDA_ENV_NAME print-APP_CONDA_ENV_PREFIX

guard-env-%:
	@ if [ "${${*}}" = "" ]; then \
		echo "Environment variable $* not set"; \
		exit 1; \
	fi

############################## Mandatory Targets ##############################
submodule-update:
	git submodule update --init --recursive --remote
	@echo "Git submodules updated"


APP_DEVEL_DOCKER_BASE_IMAGE_STRING := $(DOCKER_REPO_PATH)$(DOCKER_USERNAME_PATH)$(APP_DEVEL_DOCKER_BASE_IMAGE)
APP_DEVEL_DOCKER_IMAGE_STRING := $(DOCKER_REPO_PATH)$(DOCKER_USERNAME_PATH)$(APP_DEVEL_DOCKER_IMAGE)
APP_DEVEL_DOCKER_BASE_IMAGE_STRING_AICR := $(AICR_DOCKER_REPO_PATH)$(AICR_DOCKER_NAMESPACE_PATH)$(APP_DEVEL_DOCKER_BASE_IMAGE)
APP_DEVEL_DOCKER_IMAGE_STRING_AICR := $(AICR_DOCKER_REPO_PATH)$(AICR_DOCKER_NAMESPACE_PATH)$(APP_DEVEL_DOCKER_IMAGE)

CI_BUILD_USERNAME ?= $(shell whoami)
CI_BUILD_UID ?= $(shell id -u)
CI_BUILD_GID ?= $(shell id -g)
PIP_EXTRA_INDEX_TRUSTED_HOST ?= devopsartifact.jio.com


init-repo: guard-env-PIP_EXTRA_INDEX_URL guard-env-APP_PROJECT_NAME
	jq .name ./.devcontainer/devcontainer.json
	jq  '.name = "$(APP_PROJECT_NAME)"' ./.devcontainer/devcontainer.json >> tmp.json && mv tmp.json ./.devcontainer/devcontainer.json

### original target [renamed]... to be removed later
devel-package-nexus: guard-env-PIP_EXTRA_INDEX_URL guard-env-APP_PROJECT_NAME init-repo
	docker build \
		-t $(APP_DEVEL_DOCKER_IMAGE_STRING) \
		-f ./.devcontainer/Dockerfile \
		--build-arg BASE_IMAGE=$(APP_DEVEL_DOCKER_BASE_IMAGE_STRING) \
		--build-arg http_proxy=$(http_proxy) \
		--build-arg https_proxy=$(https_proxy) \
		--build-arg no_proxy=$(no_proxy) \
		--build-arg INSTALL_DEVEL_DEPS=true \
		--build-arg USERNAME=$(CI_BUILD_USERNAME) \
		--build-arg USER_UID=$(CI_BUILD_UID) \
		--build-arg USER_GID=$(CI_BUILD_GID) \
		--build-arg PIP_EXTRA_INDEX_TRUSTED_HOST=$(PIP_EXTRA_INDEX_TRUSTED_HOST) \
		--build-arg PIP_EXTRA_INDEX_URL=$(PIP_EXTRA_INDEX_URL) \
		--build-arg GIT_COMMIT=$(shell git log -1 --format=%h) \
		.
### added new target
devel-package-aicr: guard-env-PIP_EXTRA_INDEX_URL guard-env-APP_PROJECT_NAME init-repo environment
	rm -rf ./dist ./build *.egg-info
	./hack/build-images.sh $(shell cat VERSION) $(shell git log -1 --format=%h) $(http_proxy) $(https_proxy)

### original target [renamed].. to be removed later
devel-get-nexus:
	docker pull $(APP_DEVEL_DOCKER_IMAGE_STRING)

### added new target 
devel-get-aicr:
	docker pull jioaicr.azurecr.io/jioai/vision/model/mlserver-python38-gpu:$(shell cat VERSION)-slim

### original target [renamed].. to be removed later
devel-publish-nexus:
	docker push $(APP_DEVEL_DOCKER_IMAGE_STRING)
	
### added new target 
devel-publish-aicr: docker-login-aicr
	docker push jioaicr.azurecr.io/jioai/vision/model/mlserver-python38-gpu:$(shell cat VERSION)-slim


devel-get: 
ifeq ($(CONTAINER_REGISTRY_TYPE), azure-aicr)
	$(MAKE) devel-get-aicr
else
	$(MAKE) devel-get-nexus
endif	

devel-package:
ifeq ($(CONTAINER_REGISTRY_TYPE), azure-aicr)
	$(MAKE) devel-package-aicr
else
	$(MAKE) devel-package-nexus
endif	

devel-publish:
ifeq ($(CONTAINER_REGISTRY_TYPE), azure-aicr)
	$(MAKE) devel-publish-aicr
else
	$(MAKE) devel-publish-nexus
endif	


environment-chown:
ifneq ($(CONDA_ROOT),)
	sudo chown -R $(CI_BUILD_USERNAME):$(CI_BUILD_USERNAME) $(CONDA_ROOT)
endif

environment: guard-env-PIP_EXTRA_INDEX_URL submodule-update
	$(CONDA_BIN) remove -n $(APP_CONDA_ENV_NAME) --all -y --force-remove
	export https_proxy=$(http_proxy) && export http_proxy=$(http_proxy) && $(CONDA_BIN) env update -n $(APP_CONDA_ENV_NAME) -f $(ENV_FILE)
	export https_proxy=$(http_proxy) && export http_proxy=$(http_proxy) && $(CONDA_ACTIVATE) pip3 install \
		--upgrade --index-url=https://pypi.org/simple \
		--extra-index-url=$(PIP_EXTRA_INDEX_URL) \
		--trusted-host $(PIP_EXTRA_INDEX_TRUSTED_HOST) \
		--editable .

	@echo "Environment created, dependencies installed/updated"

install: guard-env-PIP_EXTRA_INDEX_URL
	$(CONDA_BIN) env update -n $(APP_CONDA_ENV_NAME) -f $(ENV_FILE)
	$(CONDA_ACTIVATE) pip install \
		--upgrade --index-url=https://pypi.org/simple \
		--extra-index-url=$(PIP_EXTRA_INDEX_URL) \
		--trusted-host $(PIP_EXTRA_INDEX_TRUSTED_HOST) \
		-r requirements.txt -r requirements-test.txt
	@echo "Dependencies installed/updated"

docker-login-nexus:
	docker login -u $(DOCKER_LOGIN_USERNAME) -p $(DOCKER_LOGIN_PASSWORD) $(DOCKER_LOGIN_REPO)
	@echo "Docker logged in"

docker-login-aicr:
	docker login -u $(AICR_DOCKER_LOGIN_USERNAME) -p $(AICR_DOCKER_LOGIN_PASSWORD) $(AICR_DOCKER_LOGIN_REPO)
	@echo "JioAICR Docker logged in"

docker-login:
ifeq ($(CONTAINER_REGISTRY_TYPE), azure-aicr)
	$(MAKE) docker-login-aicr
else
	$(MAKE) docker-login-nexus
endif

update-origin:
	git checkout $(GIT_BRANCH)
	git push origin

update-alt:
	git pull origin $(GIT_BRANCH) || true
	git checkout dev
	git pull origin dev
	git push -u alt --all || git checkout $(GIT_BRANCH)
	git checkout $(GIT_BRANCH)